{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ReactPixel","init","autoConfig","debug","pageView","Footer","react_default","a","createElement","className","href","IndexPage","id","lib_default","as","data-rellax-speed","target","alt","App_Footer","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+LAUAA,IAAWC,KAAK,mBALS,GACT,CACZC,YAAY,EACZC,OAAO,IAGXH,IAAWI,WAEX,IAAMC,EAAS,WACb,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,OAA8BH,EAAAC,EAAAC,cAAA,sBAC9BF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,MAAhB,MACAH,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,IAAsBH,EAAAC,EAAAC,cAAA,oBACtBF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,MAA6BH,EAAAC,EAAAC,cAAA,wBAE/BF,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,KAAuBH,EAAAC,EAAAC,cAAA,oBACvBF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,MAA6BH,EAAAC,EAAAC,cAAA,wBAE/BF,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,KAAuBH,EAAAC,EAAAC,cAAA,oBACvBF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,MAA6BH,EAAAC,EAAAC,cAAA,wBAE/BF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,0DAA0DD,UAAU,YAA5E,cA8BOE,EAxBG,kBAChBL,EAAAC,EAAAC,cAAA,OAAKI,GAAG,QACNN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAQO,GAAG,UAAUF,GAAG,SAASG,oBAAkB,OACnDT,EAAAC,EAAAC,cAAA,WAASI,GAAG,YACVN,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,QAAMI,GAAG,SACTN,EAAAC,EAAAC,cAAA,2LAEEF,EAAAC,EAAAC,cAAA,eAGJF,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,8BAA8BM,OAAO,SAASC,IAAI,qBAC1DX,EAAAC,EAAAC,cAAA,KAAGE,KAAK,kCAAkCM,OAAO,SAASC,IAAI,UAC9DX,EAAAC,EAAAC,cAAA,KAAGE,KAAK,0BAA0BM,OAAO,SAASC,IAAI,mBACtDX,EAAAC,EAAAC,cAAA,KAAGE,KAAK,2BAA2BM,OAAO,SAASC,IAAI,oBACvDX,EAAAC,EAAAC,cAAA,KAAGE,KAAK,0BAA0BM,OAAO,SAASC,IAAI,gBACtDX,EAAAC,EAAAC,cAAA,KAAGE,KAAK,uCAAuCM,OAAO,SAASC,IAAI,oBAGvEX,EAAAC,EAAAC,cAACU,EAAD,QC7CgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.70b0491a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Rellax from 'react-rellax';\nimport ReactPixel from 'react-facebook-pixel';\nimport './assets/sass/style.css';\n\nconst advancedMatching = {};\nconst options = {\n    autoConfig: true,\n    debug: false,\n};\nReactPixel.init('2055850057979112', advancedMatching, options);\nReactPixel.pageView();\n\nconst Footer = () => {\n  return (\n    <footer>\n      <section>\n        <p className=\"price main\">$125<span>/hour</span></p>\n        <span className=\"or\">or</span>\n        <article>\n          <p className=\"hours\">8<span>hrs</span></p>\n          <p className=\"price main\">$1k<span>/month</span></p>\n        </article>\n        <article>\n          <p className=\"hours\">24<span>hrs</span></p>\n          <p className=\"price main\">$2k<span>/month</span></p>\n        </article>\n        <article>\n          <p className=\"hours\">40<span>hrs</span></p>\n          <p className=\"price main\">$3k<span>/month</span></p>\n        </article>\n        <a href=\"mailto:kyle@theinitgroup.com?subject=Design/Development\" className=\"main-btn\">Contact</a>\n      </section>\n    </footer>\n  );\n};\n\nconst IndexPage = () => (\n  <div id=\"home\">\n    <Rellax as=\"section\" id=\"banner\" data-rellax-speed=\"-2\"></Rellax>\n    <section id=\"projects\">\n      <article>\n        <span id=\"Logo\"></span>\n        <blockquote>\n          We’re a collective of creative problem solvers, digital nomads, lifetime travelers, and pioneers of creative space. We’re in it for it, or not in it at all.\n          <cite></cite>\n        </blockquote>\n      </article>\n      <article>\n        <a href=\"https://realeyezapparel.com\" target=\"_BLANK\" alt=\"Realeyez Apparel\"></a>\n        <a href=\"https://instagram.com/beheardla\" target=\"_BLANK\" alt=\"Heard\"></a>\n        <a href=\"http://andersonpaak.com\" target=\"_BLANK\" alt=\"Anderson .Paak\"></a>\n        <a href=\"https://twotimelosers.co\" target=\"_BLANK\" alt=\"Two Time Losers\"></a>\n        <a href=\"https://smokebreak.live\" target=\"_BLANK\" alt=\"Smoke Break\"></a>\n        <a href=\"https://kylebebeau.com/track-artwork\" target=\"_BLANK\" alt=\"Track Artwork\"></a>\n      </article>\n    </section>\n    <Footer />\n  </div>\n)\n\nexport default IndexPage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}